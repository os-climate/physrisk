import numpy as np

from physrisk.vulnerability_models.config_cdf_based_vuln_function import (
    CDFBasedVulnerabilityFunction,
)


def test_vuln_uncertainty():
    hazard_indicator = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0])
    impact_mean = np.array([0.0, 0.327, 0.494, 0.617, 0.721, 0.870, 0.931, 0.984, 1.0])
    impact_stddev = np.array([0.0, 0.25, 0.22, 0.21, 0.21, 0.17, 0.12, 0.048, 0.0])
    vuln = CDFBasedVulnerabilityFunction(
        hazard_indicator, impact_mean, impact_stddev, kind="beta"
    )
    interp = vuln.interpolate_cdfs(np.array([0.0, 1.0, 2.3, 6.0, 7.0]))
    # flat extrapolation
    np.testing.assert_array_almost_equal(interp[0, :], vuln.cdf[0, :])
    # check interpolation
    np.testing.assert_array_almost_equal(interp[1, :], vuln.cdf[2, :])
    np.testing.assert_array_almost_equal(
        interp[2, :], vuln.cdf[4, :] * 0.7 + vuln.cdf[5, :] * 0.3
    )
    # flat extrapolations
    np.testing.assert_array_almost_equal(interp[3, :], vuln.cdf[8, :])
    np.testing.assert_array_almost_equal(interp[4, :], vuln.cdf[8, :])

    hazard_indicator_bin_edges = np.array([0.0, 1.0, 1.1, 2.0])
    probs = vuln.prob_matrix_for_indicator_bins(hazard_indicator_bin_edges)
    cdf_edge_1 = vuln.interpolate_cdfs(np.array([1.0]))[0, :]
    cdf_edge_2 = vuln.interpolate_cdfs(np.array([1.1]))[0, :]
    cdf = (cdf_edge_1 + cdf_edge_2) / 2
    expected_probs = cdf[1:] - cdf[0:-1]
    np.testing.assert_array_almost_equal(probs[1, :], expected_probs)
